Class {
	#name : #GLMPortEventTest,
	#superclass : #TestCase,
	#category : #'Glamour-Tests'
}

{ #category : #testing }
GLMPortEventTest >> testCreation [
	| anEvent |
	anEvent := GLMPortEvent 
		on: 1
		previouslyValued: 2.
	self assert: anEvent port = 1.
	self assert: anEvent oldValue = 2.
	self assert: anEvent transmissionContext isEmpty.
]

{ #category : #testing }
GLMPortEventTest >> testCreationWithTransmissionContext [
	| anEvent |
	anEvent := GLMPortEvent 
		on: 1
		previouslyValued: 2
		in: 3.
	self assert: anEvent port = 1.
	self assert: anEvent oldValue = 2.
	self assert: anEvent transmissionContext = 3.
]

{ #category : #testing }
GLMPortEventTest >> testInterdependentPanes [
	|browser outerCount oneCount |
	outerCount := 0.
	oneCount := 0.
	browser := GLMTableLayoutBrowser new.
	browser column: #one; column: #two; column: #three.
	browser showOn: #one; using: [
		browser list
			display: [:x | 1 to: x]].
	browser showOn: #two; from: #one; using: [
		browser list
			display: [:x | 1 to: x*2]].
	browser showOn: #three; from: #two; using: [
		browser list
			display: [:x | 1 to: x*3];
			update: #focus on: $f entitled: 'Focus' with: [:list | list selection] ].
	browser sendTo: #outer->#focus from: #three->#focus with: [:x | outerCount := outerCount + 1].
	browser sendTo: #one->#selection from: #outer->#focus with: [:x | oneCount := oneCount + 1].
	browser startOn: 5.
	((browser paneNamed: #one) port: #selection) value: 3.
	((browser paneNamed: #two) port: #selection) value: 6.
	((browser paneNamed: #three) port: #selection) value: 12.
	((browser paneNamed: #three) port: #focus) value: 12.
	self assert: oneCount = 1.
	self assert: outerCount = 1.
]

{ #category : #testing }
GLMPortEventTest >> testPortName [
	| anEvent |
	anEvent := GLMPortEvent 
		on: ((GLMPort new) name: '1'; yourself)
		previouslyValued: 2.
	self assert: anEvent portName = '1'.

]
